/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true } 
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */

// "test-fileServer": "node ./node_modules/jest/bin/jest.js ./tests/fileServer.test.js"
const express = require("express");
const bodyParser = require("body-parser");

const app = express();

app.use(bodyParser.json());

let todoList = [];

app.get("/todos", (req, res) => {
  res.send(todoList);
});

app.get("/todos/:id", (req, res) => {
  const id = parseInt(req.params.id);

  let requiredTodo = {};
  let flag = false;
  for (let i = 0; i < todoList.length; i++) {
    if (todoList[i].id === id) {
      requiredTodo = todoList[i];
      flag = true;
    }
  }

  if (flag === false) res.status(404).send();
  else res.send(requiredTodo);
});

app.post("/todos", (req, res) => {
  let counter = parseInt(Math.random() * 10);
  const { title, description } = req.body;

  const data = {
    id: counter,
    title: title,
    description: description,
  };
  todoList.push(data);

  res.status(201).send(todoList);
});

app.put("/todos/:id", (req, res) => {
  const id = parseInt(req.params.id);

  let index = -1;
  for (let i = 0; i < todoList.length; i++) {
    if (todoList[i].id === id) {
      todoList[i].title = req.body.title;
      todoList[i].description = req.body.description;
      index = i;
      break;
    }
  }
  if (index !== -1) res.send(todoList[index]);
  else res.status(404).send();
});
app.delete("/todos/:id", (req, res) => {
  const id = parseInt(req.params.id);

  let flag = false;
  for (let i = 0; i < todoList.length; i++) {
    if (todoList[i].id === id) {
      todoList.splice(i, 1);
      flag = true;
      break;
    }
  }
  if (flag === true) res.status(200).send();
  else res.status(404).send();
});

app.use((req, res, next) => {
  res.status(404).send();
});

// app.listen(3000, () => {
//   console.log("Server is started");
// });

module.exports = app;
